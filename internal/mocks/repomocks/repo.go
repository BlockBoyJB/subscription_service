// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repo/repo.go

// Package repomocks is a generated GoMock package.
package repomocks

import (
	context "context"
	reflect "reflect"
	dbmodel "subscription_service/internal/model/dbmodel"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockSubscription is a mock of Subscription interface.
type MockSubscription struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionMockRecorder
}

// MockSubscriptionMockRecorder is the mock recorder for MockSubscription.
type MockSubscriptionMockRecorder struct {
	mock *MockSubscription
}

// NewMockSubscription creates a new mock instance.
func NewMockSubscription(ctrl *gomock.Controller) *MockSubscription {
	mock := &MockSubscription{ctrl: ctrl}
	mock.recorder = &MockSubscriptionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscription) EXPECT() *MockSubscriptionMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSubscription) Create(ctx context.Context, s dbmodel.Subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, s)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSubscriptionMockRecorder) Create(ctx, s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSubscription)(nil).Create), ctx, s)
}

// Delete mocks base method.
func (m *MockSubscription) Delete(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSubscriptionMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSubscription)(nil).Delete), ctx, id)
}

// FindAll mocks base method.
func (m *MockSubscription) FindAll(ctx context.Context) ([]dbmodel.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx)
	ret0, _ := ret[0].([]dbmodel.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockSubscriptionMockRecorder) FindAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockSubscription)(nil).FindAll), ctx)
}

// FindById mocks base method.
func (m *MockSubscription) FindById(ctx context.Context, id int) (dbmodel.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, id)
	ret0, _ := ret[0].(dbmodel.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockSubscriptionMockRecorder) FindById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockSubscription)(nil).FindById), ctx, id)
}

// FindPrice mocks base method.
func (m *MockSubscription) FindPrice(ctx context.Context, service, userId string, start, end time.Time) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPrice", ctx, service, userId, start, end)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPrice indicates an expected call of FindPrice.
func (mr *MockSubscriptionMockRecorder) FindPrice(ctx, service, userId, start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPrice", reflect.TypeOf((*MockSubscription)(nil).FindPrice), ctx, service, userId, start, end)
}

// Update mocks base method.
func (m *MockSubscription) Update(ctx context.Context, s dbmodel.Subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, s)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSubscriptionMockRecorder) Update(ctx, s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSubscription)(nil).Update), ctx, s)
}
